.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "MSNEK4K_DRIVERD" "1" "10 February 2011" "" ""

.SH NAME
msnek4k_driverd \- Driver for the MS Natural® Ergonomic Keyboard 4000
.SH SYNOPSIS

\fBmsnek4k_driverd\fR [ \fB--config=\fIfile\fB\fR ] [ \fB\&...Other Options...\fR ]

.SH "DESCRIPTION"
.PP
Currently, the Linux kernel supports all of the keys on the MS Natural® Ergonomic Keyboard 4000 (a.\~k.\~a.\~the "msnek4k") except for 3:
.TP 0.2i
\(bu
The "Spell" key.
.TP 0.2i
\(bu
Zoom Up
.TP 0.2i
\(bu
Zoom Down
.PP
The \fBmsnek4k_driverd\fR daemon bridges the gap by converting the raw device scancodes to X11 keycodes and/or mouse button events (via the XTest extension). When installed as packaged, you shouldn't need to do anything to run \fBmsnek4k_driverd\fR\&. X11 should run it as part of its normal session-startup tasks.
.PP
Note: the remainder of this manual refers to the ... thing ... in the middle of the keyboard that generates the "Zoom Up" and "Zoom Down" scancodes as "the 'Zoom'-Rocker".
.SS "Scancodes? Keycodes? Keysyms? X11?!?"
.PP
For those who already know what X11 is, how it handles the keyboard, and how it recieves keyboard input from the kernel, skip this section. Everyone else should read on.
.PP
Most casual users of Ubuntu, Fedora, SUSE, etc. know what GNOME and KDE are, but may be scratching their heads when they read "X11". Simply put, "X11" is a low-level, raw graphical user interface platform that GNOME and KDE are built on top of. If we compared Ubuntu/Fedora/SUSE/etc. to an automobile, GNOME and KDE are the plush interior and accessories; X11 is the drive-train.
.PP
X11 assigns a number (usually) between 8 and 255 to every key on the keyboard. These are the "keycodes". Note the emphasis on key, not letter. The "\fBShift\fR" and "\fBAlt\fR" keys have their own keycodes. The '@' character does not; it and the '2' character are on the same key on US keyboards.
.PP
This is where "keysyms" come in. X11 contains a user-configurable mapping from combinations of keycodes to keysyms. A unique (set of) keycode(s) translates to one keysym, and vice-versa. For example, X11 traditionally converts the keycode, "9", to the keysym "\fBTab\fR". "\fBXF86AudioPlay\fR" is a keysym. So are "\fBq\fR" and "\fBQ\fR" (i.\~e.\~there's a keysym for every letter and number). When you set KDE and GNOME shortcuts, you're actually telling them what to do when they get a \fBkeysym\fR\&.
.PP
A "scancode" is an integer number that the \fBkeyboard itself\fR sends to the OS. The Linux kernel (not X11) may change these raw codes, but usually it passes them along unchanged. (The Linux kernel, incidentally, converts the scancodes to the keycodes used by X11 and most other programs.) In the case of the Microsoft Natural® Ergonomic Keyboard 4000, Linux \fBhas to\fR change the raw scancodes for certain keys from a number above 255 to an unused scancode in the range from 0 to 255. (Linux can't handle raw scancodes above 255.)
.SS "Quickstart"
.PP
If you installed \fBmsnek4k_driverd\fR from a "\&.deb" or "\&.rpm" package, the package's built-in postinstall script will start it for you. It comes preconfigured with sane defaults. The EXAMPLES section below has another fairly common configuration (as well as some uncommon ones).
.PP
Merely running \fBmsnek4k_driverd\fR will not automagically map the "Zoom"-Rocker and "Spell" key to keysyms. You'll need to do that, yourself, either by using the "\fBxmodmap\fR" utility or by customizing one of the "msnek4k_driverd.xmodmap" files (see the FILES section below). Lastly, you'll obviously need to fire up your KDE/GNOME/whatever settings tool to create those keyboard shortcuts for the "Zoom"-Rocker and the "Spell" key.
.SH "OPTIONS"
.PP
You generally won't need to deal with the commandline options. They're provided to allow you tweak a setting, testing it before modifying the configuration file. For most people, the defaults in the configuration file should work fine.
.PP
Many of these options correspond to a configuration file setting which the option overrides. Those options are not fully documented in this section. See the description of the corresponding configuration file settings, instead.
.TP
\fB--help\fR
Prints the usage message
.TP
\fB-v\~[\fIlevel\fB]\fR
.TP
\fB--verbose[\fI=level\fB]\fR
Makes \fBmsnek4k_driverd\fR generate more output to its log file.
.TP
\fB--config=[\fIfile\fB]\fR
The configuration file.

If \fBmsnek4k_driverd\fR cannot find its default configuration file (see the "FILES" section), this option becomes required.
.TP
\fB--help-config\fR
Prints a message describing the configuration file settings. Using this option together with \fB--verbose\fR outputs a sample configuration file.

You can generate a configuration file template by running the following:

.nf
\~\~\~\~me@myhost:$ msnek4k_driverd\~--help-config\~-v\~\\
\~\~\~\~\~\~\~\~\~\~\~\~>my-msnek4k-driverd.conf\~
.fi
.TP
\fB--dbg\fR
Causes \fBmsnek4k_driverd\fR to run in the foreground instead of daemonizing itself. Generally only useful for development or serious debuggins.
.TP
\fB-l\~\fIlogfile\fB\fR
.TP
\fB--logfile=\fIlogfile\fB\fR
Same as  the configuration file setting, "\fBlogfile\fR".

(This option is ignored when the \fB--dbg\fR option is specified.)
.TP
\fB-d\~\fIX11-display\fB\fR
.TP
\fB--display=\fIX11-display\fB\fR
Same as  the configuration file setting, "\fBdisplay\fR".

This option is required if neither the \fBDISPLAY\fR environment variable nor the \fBdisplay\fR setting in the configuration file are set.
.TP
\fB-k\~\fIdevice\fB\fR
.TP
\fB--kbd-dev=\fIdevice\fB\fR
Same as  the configuration file setting, "\fBkbd-dev\fR".
.TP
\fB-S\~\fIkeycode\fB\fR
.TP
\fB--spell=\fIkeycode\fB\fR
Same as  the configuration file setting, "\fBSpell.x11Keycode\fR".
.TP
\fB-U\~\fIkeycode\fB\fR
.TP
\fB--zoom-up=\fIkeycode\fB\fR
Same as  the configuration file setting, "\fBZoomUp.x11Keycode\fR".
.TP
\fB-D\~\fIkeycode\fB\fR
.TP
\fB--zoom-down=\fIkeycode\fB\fR
Same as  the configuration file setting, "\fBZoomDown.x11Keycode\fR".
.TP
\fB-b\fR
.TP
\fB--Zoom.isMouseButton\fR
Same as  the configuration file setting, "\fBZoom.isMouseButton\fR".
.TP
\fB-w\fR
.TP
\fB--Zoom.isMouseWheel\fR
Same as  the configuration file setting, "\fBZoom.isMouseWheel\fR".
.SH "THE CONFIGURATION FILE"
.PP
As noted in the previous section, there are commandline options corresponding to some of \fBmsnek4k_driverd\fR\&'s configuration file settings. Those options override the the corresponding setting. There are also settings that only appear in the configuration file.
.PP
\fBmsnek4k_driverd\fR requires a configuration file (at least at present). If you installed from a "\&.deb" or "\&.rpm" package, the default configuration file is (most likely) "/etc/msnek4k_driverd.conf". (See the "FILES" section for more details.) Use the "\fB--config\fR" commandline option to specify an alternate configuration file.
.PP
The configuration file follows a rather standard syntax. Settings have the form: "\fBsetting\fR\~=\~\fIvalue\fR". Any whitespace surrounding the '=' delimiter is ignored. (It isn't required, either). Every "\fIvalue\fR" must begin with a non-whitespace character (after that, a "\fIvalue\fR" can contain as much whitespace as you wish). The "\fIvalue\fR" ends at the end of the line or the first '#' character. The '#' character marks the beginning of a comment. Comments end at the end of the line. A comment can start anyplace in the line, not just at the beginning. Unfortunately, this also means that a '#' character can never appear in a "\fIvalue\fR".
.PP
After modifying the configuration file, you can use "SIGUSR1" to reread it without restarting \fBmsnek4k_driverd\fR\&. This only works with the configuration file that \fBmsnek4k_driverd\fR read when it started, however. See the "SIGNALS" section for more details.
.PP
The valid configuration file settings are as follows:

.nf
.fi
.TP
\fBdisplay = \~\fIX11-display\fB\fR
.PP
Send the keyboard events to the X11 display, "\fIX11-display\fR".
.PP
Normally not needed, since \fBmsnek4k_driverd\fR tries to use the value of the \fBDISPLAY\fR environment variable. Use this setting to specify an alternate X11 display, if needed. (It overrides \fBDISPLAY\fR\&.)
This setting is required if the \fBDISPLAY\fR environment variable is not set. Alterntatively, one could use the \fB--display\fR commandline option.

.nf
.fi
.TP
\fBkbd-dev = \fIdevice\fB\fR
.PP
The keyboard device that \fBmsnek4k_driverd\fR reads keyboard scancodes from.
.PP
"\fIdevice\fR" should be the full pathname of the device, or the special keyword "auto". Specifying "auto" causes \fBmsnek4k_driverd\fR to scan all of the "/dev/input/event*" devices. It stops when it finds the first one matching all of the following criteria:
.TP 0.2i
\(bu
The device is manufactured by Microsoft.
.TP 0.2i
\(bu
The device ID is the one for the MS Natural® Ergonomic Keyboard 4000.
.TP 0.2i
\(bu
The device's features, as specified by the kernel, indicate that it (probably) generates the scancodes for the "Zoom"-Rocker.
.PP
For the times when this auto-scanning mechanism fails, use this option (or its related configuration file variable) to manually set the correct device. You should be able to find it by doing the following:
.TP 3
1. 
Select a promising-looking device in "/dev/input/by-id".
.TP 3
2. 
Run the following as root in a terminal (\fBxterm\fR, \fBkonsole\fR, \fBgnome-terminal\fR\&...):

.nf
\~\~\~\~root@myhost:/root# ls\~-l\~/dev/input/by-id/\fI<test-candidate>\fR
\~\~\~\~root@myhost:/root# input-events\~\fI<n>\fR
.fi

\&...replacing \fI<test-candidate>\fR with the promising-looking device you chose, which will be a symlink. Use the output of the first command to find symlinked-to file, "/dev/input/event\fI<n>\fR". That gives the value of \fI<n>\fR\&.
.TP 3
3. 
Move the "Zoom"-Rocker. If you get a response, you've found the correct device.

Use the symlink under "/dev/input/by-id" as the value for this option. (That's preferred to the "/dev/input/event\fI<n>\fR" device.)
.TP 3
4. 
If you had no response, kill the running input-events process and repeat from step-1.

.nf
.fi
.TP
\fBlogfile = \fIfilename\fB\fR
.PP
The name of the log file. Ignored if "\fB--dbg\fR" is passed on the commandline. \fIfilename\fR is overwritten if it exists.
.PP
The \fIfilename\fR should contain an absolute path. Relative paths (or no path at all) are valid, but not advisable.

.nf
.fi
.TP
\fBSpell.scancode = \fIval\fB\fR
The raw keyboard scancode generated by the "Spell" key.
.TP
\fBZoomUp.scancode = \fIval\fB\fR
The raw keyboard scancode generated by moving the "Zoom"-Rocker up.
.TP
\fBZoomDown.scancode = \fIval\fB\fR
The raw keyboard scancode generated by moving the "Zoom"-Rocker down.
.PP
For all 3 of these settings, \fIval\fR should be an integer, in base-10. An octal won't be recognized as such, and a hexadecimal value will be treated as a string and cause a parsing error.
.PP
Almost everyone can safely\fB \fRignore these 3 settings. Feel free to skip to the documentation for the next setting.
.PP
These settings are configurable solely for user convenience. If some new release of the Linux kernel remapped the raw hardware scancodes to something else, you could continue using \fBmsnek4k_driverd\fR without needing to wait for a new binary release. 
.PP
To find the new scancodes, or to check if they've changed, run the "\fBinput-events\fR" command as described in step-2 of the previous documentation for the \fBkbd-dev\fR setting. (Be sure to use the correct "/dev/input/event\fI<n>\fR" device when doing so.) Move the "Zoom"-Rocker and hit the "Spell"-key and look at the output in the terminal. You should see lines containing "EV_KEY KEY_\fI<keynm>\fR\~(\fI<hexint>\fR)\~pressed". "\fI<keynm>\fR" will be the name of the key (as "\fBinput-events\fR" knows it), while the "\fI<hexint>\fR" will be its scancode, in hexadecimal.

.nf
.fi
.TP
\fBSpell.x11Keycode = \fIval\fB\fR
The X11 keycode to map the Spell key to.
.TP
\fBZoomUp.x11Keycode = \fIval\fB\fR
What to generate when the "Zoom"-Rocker is moved up. Will be either an X11 keycode or mouse button number.
.TP
\fBZoomDown.x11Keycode = \fIval\fB\fR
What to generate when the "Zoom"-Rocker is moved up. Will be either an X11 keycode or mouse button number.
.PP
\fIval\fR must be a keycode (between 1 and 255) that isn't already in use by X11. For most users, the defaults are sufficient.
.PP
(You \fBcould\fR use a keycode that is already in use by another key, causing both keys to identically. But then, why map it at all?)
.PP
To find unused keycodes, run the following from a terminal: 

.nf
\~\~\~\~xmodmap -pke | grep ' = *$' | less
.fi
.PP
Picking one of the higher unused keycodes should insulate you from future XFree86/Xorg or kernel changes.
.PP
Additionally, \fBZoomUp.x11Keycode\fR and \fBZoomDown.x11Keycode\fR can also be a mouse button number. See the description for the \fBZoom.isMouseButton\fR and \fBZoom.isMouseWheel\fR settings for how to use the "Zoom"-Rocker as mouse buttons.
.PP
Note: These 3 settings are for X11 keycodes (\fBmsnek4k_driverd\fR has no effect on the (virtual) console(s)). Furthermore, these are not keysyms, but keycodes. (Refer back to the section, "Scancodes? Keycodes? Keysyms? X11?!?" if you've forgotten the difference.)

.nf
.fi
.TP
\fBZoom.isMouseButton = \fIval\fB\fR
.PP
When \fIval\fR="true", \fBmsnek4k_driverd\fR maps the "Zoom"-Rocker to a pair of mouse buttons. The \fBZoomUp.x11Keycode\fR and \fBZoomDown.x11Keycode\fR settings will be treated as mouse button numbers. \fBBe sure to change them accordingly.\fR Mouse button numbers range from 1 to 10.
.PP
Because the "Zoom"-Rocker is really a key, it autorepeats. So, holding it up or down will produce repeated "mouse-button\~pressed" events. Letting it return to the neutral position produces a single "mouse-button\~released" event, however.

.nf
.fi
.TP
\fBZoom.isMouseWheel = \fIval\fB\fR
.PP
When \fIval\fR="true" \fBand\fR "\fBZoom.isMouseButton\fR\~=\~true", \fBmsnek4k_driverd\fR makes the "Zoom"-Rocker behave like a mouse-wheel.
.PP
X11 typically maps buttons "4" and "5" to the mouse-wheel (one button for each wheel direction). So, what's this additional setting for?
.PP
Normally, holding down a mouse button generates a single event. Releasing it generates another, separate event. A mouse wheel, in contrast, produces button \fBclicks\fR under X11 (not a separate press and release events). If you want to use the "Zoom"-Rocker as a mouse wheel, this becomes a problem. Holding the "Zoom"-Rocker up or down produces only a "mouse-pressed" event when \fBmsnek4k_driverd\fR maps the "Zoom"-Rocker to a pair of mouse buttons. This might produce the same effect as moving the mouse-wheel once (or it might do nothing at all). The main reason for mapping the "Zoom"-Rocker to a mouse-wheel, however, is to use it as an "auto-rolling" mouse-wheel.
.PP
Setting "\fBZoom.isMouseWheel\fR\~=\~true" causes \fBmsnek4k_driverd\fR to generate a mouse \fBclick,\fR rather than a separate "mouse-button\~pressed" or "mouse-button\~released" event. When held in the up (or down) position, the "Zoom"-Rocker will produce repeated clicks, acting as if you're spinning the mouse wheel nonstop.
.PP
Remember: \fBZoom.isMouseWheel\fR is ignored unless "\fBZoom.isMouseButton\fR\~=\~true".

.nf
.fi
.TP
\fBZoomUp.isMouseButton = \fIval\fB\fR
.TP
\fBZoomUp.isMouseWheel = \fIval\fB\fR
.PP
Like \fBZoom.isMouseButton\fR and \fBZoom.isMouseWheel\fR, respectively, but for the up-direction only. Provides finer-grained control over the behavior of the "Zoom"-Rocker.
.PP
You will almost never need to use these two settings. They're only provided for expert users with a unusual system setup.

.nf
.fi
.TP
\fBZoomDown.isMouseButton = \fIval\fB\fR
.TP
\fBZoomDown.isMouseWheel = \fIval\fB\fR
.PP
Like \fBZoom.isMouseButton\fR and \fBZoom.isMouseWheel\fR, respectively, but for the up-direction only. Provides finer-grained control over the behavior of the "Zoom"-Rocker.
.PP
You will almost never need to use these two settings. They're only provided for expert users with a unusual system setup.

.nf
.fi
.SH "ENVIRONMENT"
.PP
There is only one environment variable that \fBmsnek4k_driverd\fR uses: \fBDISPLAY\fR\&. The \fBdisplay\fR configuration file setting overrides it, while the \fB--display\fR commandline option overrides them both.
.PP
Feel free to modify \fBDISPLAY\fR in lieu of using the \fBdisplay\fR configuration file setting or the \fB--display\fR commandline option to change which X11 display \fBmsnek4k_driverd\fR sends keyboard (and/or mouse) events to.
.SH "SIGNALS"
.PP
\fBmsnek4k_driverd\fR handles the following signals specially:
.TP 0.2i
\(bu
SIGUSR1

When \fBmsnek4k_driverd\fR receives this signal, it rereads the configuration file that it was started with. This allows you to modify your configuration file and have the changes take effect immediately. Simply run the following from a terminal: 

.nf
\~\~\~\~me@myhost:$ sudo\~pkill\~-SIGUSR1\~msnek4k_driverd
.fi

If you don't have \fBpkill\fR installed on your system, you can send a "SIGUSR1" to \fBmsnek4k_driverd\fR using the following set of commands: 

.nf
\~\~\~\~me@myhost:$ msnek4k_pid=`ps\~-ew\~|\~grep\~-v\~grep\~|\~\\
\~\~\~\~\~\~\~\~grep\~msnek4k_driverd\~|\~awk\~\&'{print\~$1}'`
\~\~\~\~me@myhost:$ sudo\~kill\~-SIGUSR1\~$msnek4k_pid
.fi
.TP 0.2i
\(bu
SIGHUP
.TP 0.2i
\(bu
SIGINT
.TP 0.2i
\(bu
SIGUSR2
.TP 0.2i
\(bu
SIGPIPE

\fBmsnek4k_driverd\fR ignores these 4 signals.
.SH "FILES"
.TP
\fB\fI/etc/msnek4k_driverd.conf\fB\fR
.TP
\fB\fI{prefix}\fB\fI/etc/msnek4k_driverd.conf\fB\fR
The default configuration file.
.PP
"\fI{prefix}\fR" represents the base path where the \fBmsnek4k_driverd\fR binary was installed. I.\~e.\~the binary's \fBpath\fR will be "\fI{prefix}\fR/bin/msnek4k_driverd". The first file is the one used when the base installation path is "/usr", which is often the case for most software packages.
.PP
Unless you created a custom installation (or your Linux distribution is weird), the default configuration file should be "\fI/etc/msnek4k_driverd.conf\fR".

.nf
.fi
.TP
\fB\fI/etc/X11/Xsession.d/90x11-msnek4k_driverd\fB\fR
The startup script.
.PP
This is the default name and path of the X11 startup script for \fBmsnek4k_driverd\fR\&. (Note that Linux distributions are free to change the "90" to another prefix.)

.nf
.fi
.TP
\fB\fI/etc/X11/msnek4k_driverd.xmodmap\fB\fR
Systemwide keysym definitions for \fBmsnek4k_driverd\fR\&.
.PP
This file map the X11 keycodes generated by \fBmsnek4k_driverd\fR to X11 keysyms. The \fI/etc/X11/Xsession.d/90x11-msnek4k_driverd\fR script runs the \fBxmodmap\fR utility on this file followed by "\fI$HOME/.msnek4k_driverd.xmodmap\fR" if it exists.
.PP
The \fI/etc/X11/msnek4k_driverd.xmodmap\fR file distributed with \fBmsnek4k_driverd\fR defines the following keycode-to-keysym bindings:
.TP 0.2i
\(bu
keycode\~250\~->\~XF86Spell

\~"\~\~+ Shift\~->\~F10
.TP 0.2i
\(bu
keycode\~251\~->\~XF86ZoomIn

\~"\~\~+ Shift\~->\~XF86RockerUp
.TP 0.2i
\(bu
keycode\~252\~->\~XF86ZoomOut

\~"\~\~+ Shift\~->\~XF86RockerDown
.PP
The keycodes shown are the default values of the \fBSpell.x11Keycode\fR, \fBZoomUp.x11Keycode\fR and \fBZoomDown.x11Keycode\fR settings.

.nf
.fi
.TP
\fB\fI$HOME/.msnek4k_driverd.xmodmap\fB\fR
User keysym definitions for \fBmsnek4k_driverd\fR\&.
.PP
This is the user's personal "override" file. (You have to create it; it won't automagically poof into existence.)
.PP
Non-expert users should refer to the manpage for the \fBxmodmap\fR utility and look at the file, "\fI/etc/X11/msnek4k_driverd.xmodmap\fR", as an example of how to define their own "\fI$HOME/.msnek4k_driverd.xmodmap\fR".
.SH "EXAMPLES"
.SS "Notes for the Less-Experienced User:"
.PP
(Power-users, please skip this subsection.)
.PP
Customizing \fBmsnek4k_driverd\fR requires you to use the terminal. If the word "terminal" or the idea of a commandline prompt means nothing to you or is intimidating, you \fBmight\fR be able to get away with the following:
.TP 0.2i
\(bu
If your desktop menu(s) have an editor that you can, "run as Administrator", you can use that to edit the configuration file, "\fI/etc/msnek4k_driverd.conf\fR".
.TP 0.2i
\(bu
You can "restart" \fBmsnek4k_driverd\fR by logging out and logging back in.
.PP
But why go through the hassle of logging out & logging back in?
.PP
\~
.PP
If you're \fBnot intimidated\fR by the commandline, open your favorite terminal program (\fBgnome-terminal\fR, \fBkonsole\fR, \fBxterm\fR, ...) now. (You'll usually find it in the "System" or "Settings" menu of your desktop.)
.PP
To edit the configuration file, "\fI/etc/msnek4k_driverd.conf\fR" as the system administrator (a.k.a. "running as root"), use one of the following: 

.nf
\~\~\~\~me@myhost:$ sudo\~gnome-text-editor\~/etc/msnek4k_driverd.conf
.fi
.PP
or: 

.nf
\~\~\~\~me@myhost:$ su\~root\~gnome-text-editor\~/etc/msnek4k_driverd.conf
.fi
.PP
On most Linux distributions, including Debian and Ubuntu, you'll use the first one. If, however, your Linux distribution does not have the \fBsudo\fR command installed (or if it's not configured), use the command \fBsu\~root\fR in its place. (Also, feel free to replace \fBgnome-text-editor\fR with your favorite text editor. If you don't have a favorite and \fBgnome-text-editor\fR isn't installed on your system, try \fBkate\fR, \fBnedit\fR, \fBxedit\fR, or even a non-GUI editor like \fBnano\fR or \fBpico\fR\&. \fBDo not use a word processor\fR, however.)
.PP
To reload the configuration file, you will send \fBmsnek4k_driverd\fR the "SIGUSR1" signal, by running the following command in the terminal:

.nf
\~\~\~\~me@myhost:$ sudo\~pkill\~-SIGUSR1\~msnek4k_driverd
.fi
.PP
If you don't have \fBpkill\fR installed on your system, you'll have to do a little bit more typing: 

.nf
\~\~\~\~me@myhost:$ sudo\~kill\~-SIGUSR1\~`ps\~-ew\~|\~grep\~-v\~grep\~|\~\\
\~\~\~\~\~\~\~\~grep\~msnek4k_driverd\~|\~awk\~\&'{print\~$1}'`
.fi
.SS "\&"Zoom\&"-Rocker Mouse-Wheel"
.PP
The first example is how to use the "Zoom"-Rocker as a mouse-wheel, which is, besides the default configuration, another common configuration.
.PP
Start by opening the configuration file, "\fI/etc/msnek4k_driverd.conf\fR", in your favorite editor, running as "root". 
.PP
Change or add the settings shown below to the following: 

.nf
\~\~\~\~ZoomUp.x11Keycode = 4
\~\~\~\~ZoomDown.x11Keycode = 5

\~\~\~\~Zoom.isMouseButton = true
\~\~\~\~Zoom.isMouseWheel = true
.fi
.PP
Save the file and reload the configuration file by sending \fBmsnek4k_driverd\fR the "SIGUSR1" signal (as described above). After \fBmsnek4k_driverd\fR reloads the configuration file, the "Zoom"-Rocker should now act like the mouse-wheel.
.SS "\&"Zoom\&"-Rocker as Left & Right Mouse Buttons"
.PP
The next example is a tad contrived, but potentially useful for artists or anyone else who has to hold down a mouse button for extended periods of time. The steps are nearly identical to those in the previous example, with one exception. When you edit "\fI/etc/msnek4k_driverd.conf\fR", make these changes: 

.nf
\~\~\~\~ZoomUp.x11Keycode = 1
\~\~\~\~ZoomDown.x11Keycode = 3

\~\~\~\~Zoom.isMouseButton = true
\~\~\~\~Zoom.isMouseWheel = false
.fi
.PP
(The last line isn't strictly required. You could also delete or comment out any existing lines containing the \fBZoom.isMouseWheel\fR setting.)
.PP
Save the modified "\fI/etc/msnek4k_driverd.conf\fR" and send "SIGUSR1" to \fBmsnek4k_driverd\fR using the steps from the previous example.
.PP
Holding "Zoom"-Rocker up or down will now be the same as pressing and holding the left or right mouse button, respectively. Releasing the "Zoom"-Rocker acts like releasing either button.
.SS "Changing the X11 Keysyms"
.PP
Lastly, here is an example for customizing keysyms.
.PP
Suppose the file "\fI/etc/msnek4k_driverd.conf\fR" contains the following settings:

.nf
\~\~\~\~Spell.x11Keycode = 154
\~\~\~\~ZoomUp.x11Keycode = 183
\~\~\~\~ZoomDown.x11Keycode = 252
.fi
.PP
One could create a "\fI$HOME/.msnek4k_driverd.xmodmap\fR" file containing these keycode-to-keysym mappings:

.nf
\~\~\~\~keycode 154 = XF86Spell NoSymbol
\~\~\~\~keycode 183 = XF86RockerUp NoSymbol
\~\~\~\~keycode 184 = XF86RockerDown NoSymbol
.fi
.PP
Don't forget to run "xmodmap\~$HOME/.msnek4k_driverd.xmodmap" to make these changes take effect. (Notice that you don't need to send "SIGUSR1" to \fBmsnek4k_driverd\fR if you didn't change "\fI/etc/msnek4k_driverd.conf\fR".)
.PP
Next, run \fBxev\fR in a terminal, move the "Zoom"-Rocker up, then down, then hit the "Spell" key. You should see output in the terminal like this: 

.nf
\~\~\~\~KeyPress event, serial 34, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1402508986, (-354,436),
\~\~\~\~\~\~\~\~\~root:(484,458),
\~\~\~\~\~\~\~\~state 0x10, keycode 251 (keysym 0x1008ff23, XF86RockerUp),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XmbLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False

\~\~\~\~KeyRelease event, serial 35, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1402509114, (-354,436),
\~\~\~\~\~\~\~\~\~root:(484,458),
\~\~\~\~\~\~\~\~state 0x10, keycode 251 (keysym 0x1008ff23, XF86RockerUp),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False

\~\~\~\~KeyPress event, serial 35, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1402510050, (-354,436),
\~\~\~\~\~\~\~\~\~root:(484,458),
\~\~\~\~\~\~\~\~state 0x10, keycode 252 (keysym 0x1008ff24, XF86RockerDown),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XmbLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False

\~\~\~\~KeyRelease event, serial 35, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1402510178, (-354,436),
\~\~\~\~\~\~\~\~\~root:(484,458),
\~\~\~\~\~\~\~\~state 0x10, keycode 252 (keysym 0x1008ff24, XF86RockerDown),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False

\~\~\~\~KeyPress event, serial 46, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1404289170, (67,104),
\~\~\~\~\~\~\~\~\~root:(905,126),
\~\~\~\~\~\~\~\~state 0x10, keycode 250 (keysym 0x1008ff7c, XF86Spell),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XmbLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False

\~\~\~\~KeyRelease event, serial 47, synthetic NO, window 0x6200001,
\~\~\~\~\~\~\~\~root 0x15a, subw 0x0, time 1404289274, (67,104),
\~\~\~\~\~\~\~\~\~root:(905,126),
\~\~\~\~\~\~\~\~state 0x10, keycode 250 (keysym 0x1008ff7c, XF86Spell),
\~\~\~\~\~\~\~\~\~same_screen YES,
\~\~\~\~\~\~\~\~XLookupString gives 0 bytes:
\~\~\~\~\~\~\~\~XFilterEvent returns: False 
.fi
.PP
If any output is missing, check for typos in the "\fI/etc/msnek4k_driverd.conf\fR" or "\fI$HOME/.msnek4k_driverd.xmodmap\fR" file.
.SH "SEE ALSO"
.PP
\fBxmodmap\fR(1), \fBxev\fR(1)
